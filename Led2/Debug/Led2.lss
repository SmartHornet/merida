
AVRASM ver. 2.2.7  D:\Проекты\Led2\Led2\main.asm Tue Aug 14 22:38:47 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
                                 
                                 ;= Start 	macro.inc ========================================
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;= End 		macro.inc ========================================
                                 .def temp = R16
                                 .def temp2 = R17
                                 .def temp3 = R18
                                 .def temp4 = R19
                                 .def i = R21
                                 .def softTimerflags0 = R23
                                 //.def ProcedureParametr = R24 //переменная для передачи значения в параметризированную процедуру
                                 //бит 0 - программый таймер 1 переполнен(обработка кнопок)
                                 //бит 1 - программый таймер 2 переполнен(изменение яркости)
                                 
                                 .def softTimerflags1 = R24
                                 //бит 0 - 16ти рязрядный программый таймер 1 переполнен(анимация RGB ленты: 0 - фаза ожидания, 1 - рабочая фаза)
                                 
                                 .def LedStripflags = R22
                                 //
                                 //бит 1 - 0 - анимация RGB ленты: фаза увеличения яркости, 1 - фаза уменьшения яркости
                                 
                                 .def sysFlags0 = R20
                                 //бит 3 - 1 - был факт изменения состояния кнопки в переменной buttonsState
                                 //бит 4 - 1 - анимация RGB ленты включена, 0 - выключена
                                 
                                 
                                 .equ timerQueueLenght0 = 2 //длина структуры timerQueue0 (счет с 1) кол-во 8ми разрядных программых таймеров
                                 .equ timerQueueLenght1 = 1 //длина структуры timerQueue1 (счет с 1) кол-во 16ти разрядных программых таймеров
                                 .equ qtyButtons = 7 //кол-во кнопок (счет с 1)
                                 .equ bounce = 5//кол-во циклов(времени) после которого можно считать состояние кнопки достоверным
                                 //.equ bounce = 1
                                 .equ brightnessIncreaseDelay = 2 //(фаза 2)задержка между шагами при увеличении яркости (чем выше, тем ниже скорость изменения яркости)
                                 .equ brightnessDecreaseDelay = 3//(фаза 4)задержка между шагами при уменьшении яркости (чем выше, тем ниже скорость изменения яркости)
                                 .equ delayPhase1 = 255 //время фазы 1 - задержка перед увеличением яркости(после конца фазы уменьшения)
                                 .equ delayPhase3 = 10 //время фазы 3 - задержка после увеличением яркости(перед фазой уменьшения яркости)
                                 /*
                                 Фаза 1 - ожидание
                                 Фаза 2 - увеличение яркости
                                 Фаза 3 - ожидание
                                 Фаза 4 - уменьшение яркости
                                 Далее опять Фаза 1
                                 */
                                 ; RAM ========================================================
                                 		.DSEG
                                 
000100                           timerQueue0: .byte (timerQueueLenght0*2) //очередь программного таймера 0
000104                           timerQueue1: .byte (timerQueueLenght1*2) //очередь программного 16ти рязрядного таймера 1
                                 //первые timerQueueLenght0 байт - маски битов в байте флагов(softTimerflags0) 255 - таймер выключен
                                 //остальные timerQueueLenght0 байт - переменные программного таймера
000106                           buttonsCounters: .byte (qtyButtons) //переменные для хранения текущего значения количества циклов(времени) нахождения кнопки в состоянии отличном от текущего
00010d                           buttonsState: .byte(1) //биты текущего состояния кнопок 0й  - 8я кнопка,.. .1 - значит не нажата(высокий уровень на порту), 0 - нажата
00010e                           softTimerVar1Delay: .byte(1) //Значение задержки между шагами при измеении яркости (чем выше, тем ниже скорость изменения яркости), используется для передачи значения а процедуру инициализации таймера
00010f                           softTimerVar2Delay: .byte(1) //переменная времени фазы ожидания 
                                 ; FLASH ======================================================
                                 		.CSEG
                                 
                                 		.ORG 0x0000 ;RESET External Pin, Power-on Reset, Brown-out Reset and Watchdog System
000000 c072                      		RJMP	Reset
                                 		.ORG 0x0002 ;INT0 External Interrupt Request 0
000002 9518                      		RETI
                                 		.ORG 0x0004 ;INT1 External Interrupt Request 0
000004 9518                      		RETI
                                 		.ORG 0x0006 ;PCINT0 Pin Change Interrupt Request 0
000006 9518                      		RETI
                                 		.ORG 0x0008 ;PCINT1 Pin Change Interrupt Request 1
000008 9518                      		RETI
                                 		.ORG 0x000A ;PCINT2 Pin Change Interrupt Request 2
00000a 9518                      		RETI
                                 		.ORG 0x000C ;WDT Watchdog Time-out Interrupt
00000c 9518                      		RETI
                                 		.ORG 0x000E ;TIMER2_COMPA Timer/Counter2 Compare Match A
00000e 9518                      		RETI
                                 		.ORG 0x0010 ;TIMER2_COMPB Timer/Coutner2 Compare Match B
000010 9518                      		RETI
                                 		.ORG 0x0012 ;TIMER2_OVF Timer/Counter2 Overflow
000012 9518                      		RETI
                                 		.ORG 0x0014 ;TIMER1_CAPT Timer/Counter1 Capture Event
000014 9518                      		RETI
                                 		.ORG 0x0016 ;TIMER1_COMPA Timer/Counter1 Compare Match A
000016 9518                      		RETI
                                 		.ORG 0x0018 ;TIMER1_COMPB Timer/Coutner1 Compare Match B
000018 9518                      		RETI
                                 		.ORG 0x001A ;TIMER1_OVF Timer/Counter1 Overflow
00001a c036                      		RJMP timer1Ovf
                                 		.ORG 0x001C ;TIMER0_COMPA Timer/Counter0 Compare Match A
00001c 9518                      		RETI
                                 		.ORG 0x001E ;TIMER0_COMPB Timer/Coutner0 Compare Match B
00001e 9518                      		RETI
                                 		.ORG 0x0020 ;TIMER0_OVF Timer/Counter0 Overflow
000020 c00e                      		RJMP timer0Ovf
                                 		.ORG 0x0022 ;SPI STC SPI Serial Transfer Complete
000022 9518                      		RETI
                                 		.ORG 0x0024 ;USART_RX USART Rx Complete
000024 9518                      		RETI
                                 		.ORG 0x0026 ;USART_UDRE USART Data Register Empty
000026 9518                      		RETI
                                 		.ORG 0x0028 ;USART_TX USART Tx Complete
000028 9518                      		RETI
                                 		.ORG 0x002A ;ADC ADC Conversion Complete
00002a 9518                      		RETI
                                 		.ORG 0x002C ;EE READY EEPROM Ready
00002c 9518                      		RETI
                                 		.ORG 0x002E ;ANALOG COMP Analog Comparator
00002e 9518                      		RETI
                                 
                                 ;===========================================================
                                 ; Interrupts =============================================
                                 timer0Ovf:
00002f 930f                      	push temp
000030 b70f                      	in temp, SREG
000031 930f                      	push temp
000032 93cf                      	push YL
000033 93df                      	push YH
000034 935f                      	push i
                                 
000035 2755                      	clr i //переменная счетчик цикла от 0 до timerQueueLenght0
                                 
000036 e0c0                      	LDI YL, low(timerQueue0)
000037 e0d1                      	LDI YH, high(timerQueue0)
                                 tm0:
000038 9109                      	ld temp, Y+ //грузим маску
000039 3f0f                      	cpi temp, 0xFF //маска равна 255?
00003a f061                      	breq tm1 //да, пропускаем этот таймер
00003b 930f                      	push temp //нет, запоминаем маску
00003c 8109                      	ldd temp, Y+timerQueueLenght0-1 //грузим переменную программного таймера
00003d 950a                      	dec temp //уменьшаем
00003e f431                      	brne tm2 //если переменная не равна 0 то переходим на tm2
00003f 910f                      	pop temp //достаем маску
000040 2b70                      	or softTimerflags0, temp //ставим бит по маске
000041 ef0f                      	ser temp
000042 930a                      	st -Y, temp //пишем заглушку 255
000043 9109                      	ld temp, Y+//обратно увеличиваем Y
000044 c002                      	rjmp tm1
                                 tm2:
000045 8309                      	std Y+timerQueueLenght0-1, temp //записываем уменьшенную переменную
000046 910f                      	pop temp //освобождаем стек(т.к перед ветвлением записывали)
                                 tm1:
000047 9553                      	inc i
000048 3052                      	cpi i, timerQueueLenght0
000049 f771                      	brne tm0
                                 	
00004a 915f                      	pop i
00004b 91df                      	pop YH
00004c 91cf                      	pop YL
00004d 910f                      	pop temp
00004e bf0f                      	out SREG, temp
00004f 910f                      	pop temp
                                 
000050 9518                      reti
                                 
                                 timer1Ovf:
000051 930f                      	push temp
000052 b70f                      	in temp, SREG
000053 930f                      	push temp
000054 93cf                      	push YL
000055 93df                      	push YH
000056 935f                      	push i
                                 
000057 2755                      	clr i //переменная счетчик цикла от 0 до timerQueueLenght1
                                 
000058 e0c4                      	LDI YL, low(timerQueue1)
000059 e0d1                      	LDI YH, high(timerQueue1)
                                 tm10:
00005a 9109                      	ld temp, Y+ //грузим маску
00005b 3f0f                      	cpi temp, 0xFF //маска равна 255?
00005c f061                      	breq tm11 //да, пропускаем этот таймер
00005d 930f                      	push temp //нет, запоминаем маску
00005e 8108                      	ldd temp, Y+timerQueueLenght1-1 //грузим переменную программного таймера
00005f 950a                      	dec temp //уменьшаем
000060 f431                      	brne tm12 //если переменная не равна 0 то переходим на tm12
000061 910f                      	pop temp //достаем маску
000062 2b80                      	or softTimerflags1, temp //ставим бит по маске
000063 ef0f                      	ser temp
000064 930a                      	st -Y, temp //пишем заглушку 255
000065 9109                      	ld temp, Y+//обратно увеличиваем Y
000066 c002                      	rjmp tm11
                                 tm12:
000067 8308                      	std Y+timerQueueLenght1-1, temp //записываем уменьшенную переменную
000068 910f                      	pop temp //освобождаем стек(т.к перед ветвлением записывали)
                                 tm11:
000069 9553                      	inc i
00006a 3051                      	cpi i, timerQueueLenght1
00006b f771                      	brne tm10
                                 	
00006c 915f                      	pop i
00006d 91df                      	pop YH
00006e 91cf                      	pop YL
00006f 910f                      	pop temp
000070 bf0f                      	out SREG, temp
000071 910f                      	pop temp
000072 9518                      reti
                                 
                                 ; End Interrupts ==========================================
                                 
000073 ef0f                      Reset:   	LDI 	R16,Low(RAMEND)	; Инициализация стека
000074 bf0d                      		    OUT 	SPL,R16			; Обязательно!!!
                                 
000075 e008                      		 	LDI 	R16,High(RAMEND)
000076 bf0e                      		 	OUT 	SPH,R16
                                 				 
000077 e0e0                      RAM_Flush:	LDI		ZL,Low(SRAM_START)	; Адрес начала ОЗУ в индекс
000078 e0f1                      			LDI		ZH,High(SRAM_START)
000079 2700                      			CLR		R16					; Очищаем R16
00007a 9301                      Flush:		ST 		Z+,R16				; Сохраняем 0 в ячейку памяти
00007b 30f8                      			CPI		ZH,High(RAMEND)		; Достигли конца оперативки?
00007c f7e9                      			BRNE	Flush				; Нет? Крутимся дальше!
                                  
00007d 3fef                      			CPI		ZL,Low(RAMEND)		; А младший байт достиг конца?
00007e f7d9                      			BRNE	Flush
                                  
00007f 27ee                      			CLR		ZL					; Очищаем индекс
000080 27ff                      			CLR		ZH
000081 2400                      			CLR		R0
000082 2411                      			CLR		R1
000083 2422                      			CLR		R2
000084 2433                      			CLR		R3
000085 2444                      			CLR		R4
000086 2455                      			CLR		R5
000087 2466                      			CLR		R6
000088 2477                      			CLR		R7
000089 2488                      			CLR		R8
00008a 2499                      			CLR		R9
00008b 24aa                      			CLR		R10
00008c 24bb                      			CLR		R11
00008d 24cc                      			CLR		R12
00008e 24dd                      			CLR		R13
00008f 24ee                      			CLR		R14
000090 24ff                      			CLR		R15
000091 2700                      			CLR		R16
000092 2711                      			CLR		R17
000093 2722                      			CLR		R18
000094 2733                      			CLR		R19
000095 2744                      			CLR		R20
000096 2755                      			CLR		R21
000097 2766                      			CLR		R22
000098 2777                      			CLR		R23
000099 2788                      			CLR		R24
00009a 2799                      			CLR		R25
00009b 27aa                      			CLR		R26
00009c 27bb                      			CLR		R27
00009d 27cc                      			CLR		R28
00009e 27dd                      			CLR		R29
                                 ; End coreinit.inc
                                 
                                 ; Internal Hardware Init  ======================================
                                 /*PD2 - выход на неон
                                   PD3 - выход на RGB ленту, канал R (ШИМ)
                                   PD4 - выход на оптрон кнопки повер банка (1-оптрон включается и замыкает кнопку)
                                   PD5 - выход на RGB ленту, канал B (ШИМ)
                                   PD6 - выход на RGB ленту, канал G (ШИМ)
                                   PD7 - незанят
                                   
                                   PB1 - незанят (ШИМ)
                                   PB2 - передние ленты (ШИМ)
                                   PB3 - незанят (ШИМ)
                                 
                                   PC0 - вход кнопка 8 (включение и выключение неона)
                                   PC1 - вход кнопка 6 (включение и выключение RGB лент)
                                   PC2 - вход кнопка 5
                                   PC3 - вход кнопка 4
                                   PC4 - вход кнопка 3 (включение и выключение ленты)
                                   PC5 - вход кнопка 2 (мигнуть лентами)
                                   PC6 - вход кнопка 1  *неправильно подключил*
                                 
                                   [1] [3] [5] [7]
                                   [2] [4] [6] [8]
                                 
                                 */
                                 
00009f e800                      	ldi temp, 0x80 //отключение компаратора
0000a0 bf00                      	out ACSR, temp
                                 
0000a1 e404                      	ldi temp, 0b01000100 //порт D, выводы 2,6 на выход, остальные на вход с подтяжкой
0000a2 b90a                      	out DDRD, temp
                                 
0000a3 eb0b                      	ldi temp, 0b10111011
0000a4 b90b                      	out PORTD, temp
                                 
0000a5 e004                      	ldi temp, 0b00000100//порт B, вывод 2 на выход, остальные на вход с подтяжкой
0000a6 b904                      	out DDRB, temp
                                 
0000a7 ef0b                      	ldi temp, 0b11111011
0000a8 b905                      	out PORTB, temp
                                 
0000a9 2700                      	clr temp		 //порт C, выводы 0-5 на вход с подтяжкой
0000aa b907                      	out DDRC, temp
                                 
0000ab e30f                      	ldi temp, 0b00111111
0000ac b908                      	out PORTC, temp
                                 
                                 	//ТУТ нужно сбросить предделитель
                                 	//защитить выходы
                                 
0000ad e004                      	ldi temp, 0b00000100 //запуск таймера 0, делитель 256
                                 	//ldi temp, 0b00000001
0000ae bd05                      	out TCCR0B, temp
                                 
0000af e001                      	ldi temp, (1<<TOIE0) //Разрешение прерывания по переполнению таймера 0
0000b0 9300 006e                 	sts TIMSK0, temp
                                 	
0000b2 e002                      	ldi temp, 0b00000010 //запуск таймера 1, делитель 8
                                 	//ldi temp, 0b00000001
0000b3 e8c1                      	LDI YL, low(TCCR1B) //регистр MEMORY MAPPED
0000b4 e0d0                      	LDI YH, high(TCCR1B)
0000b5 8308                      	st Y, temp
                                 
0000b6 e001                      	ldi temp, 0b00000001 //Разрешение прерывания по переполнению таймера 1
0000b7 e6cf                      	LDI YL, low(TIMSK1) //регистр MEMORY MAPPED
0000b8 e0d0                      	LDI YH, high(TIMSK1)
0000b9 8308                      	st Y, temp
                                 
0000ba 9478                      	sei
                                 
                                 ; End Internal Hardware Init ===================================
                                 
                                 ; External Hardware Init  ======================================
                                 ; End Internal Hardware Init ===================================
                                 
                                 ; Run ==========================================================
                                 ; End Run ======================================================
                                 
                                 /////////////////////Инициализация переменных
0000bb d008                      	rcall initSoftTimer0 //1-й программный таймер - сканирование кнопок
                                 
0000bc e0cd                      	LDI YL, low(buttonsState) //грузим адрес переменной состояния в Y
0000bd e0d1                      	LDI YH, high(buttonsState)
0000be ef0f                      	ser temp //устанавливаем начальное значение пеменной buttonsState, все биты в 1 - изначально все кнопки не нажаты
0000bf 8308                      	st Y, temp
                                 	
                                 //rcall RGBStripInitialization
                                 ; Main =========================================================
                                 start:
                                 	
0000c0 d051                      	rcall keyScan
0000c1 d070                      	rcall buttonHandler
0000c2 d02b                      	rcall RGBStrip
                                 
0000c3 cffc                          rjmp start
                                 
                                 //1-й программный таймер - сканирование кнопок
                                 initSoftTimer0:
0000c4 e001                      	ldi temp, 1 //1 - 4,096 миллисек
0000c5 9300 0102                 	sts timerQueue0+timerQueueLenght0+0, temp
0000c7 e001                      	ldi temp, 0b00000001
0000c8 9300 0100                 	sts timerQueue0+0, temp
0000ca 9508                      ret
                                 
                                 //2-й программный таймер - изменение яркости (параметризированная процедура, параметр: задержка)
                                 initSoftTimer1:
0000cb e0ce                      	LDI YL, low(softTimerVar1Delay) //грузим адрес переменной задержки изменения яркости в Y
0000cc e0d1                      	LDI YH, high(softTimerVar1Delay)
0000cd 8108                      	ld temp, Y
                                 
0000ce 9300 0103                 	sts timerQueue0+timerQueueLenght0+1, temp
0000d0 e002                      	ldi temp, 0b00000010
                                 	//ldi temp, 255
0000d1 9300 0101                 	sts timerQueue0+1, temp	
0000d3 9508                      ret
                                 
                                 //1-й 16ти рязрядный программный таймер - анимация RGB ленты
                                 initSoftTimer10:
0000d4 e0cf                      	LDI YL, low(softTimerVar2Delay) //грузим адрес переменной задержки в Y
0000d5 e0d1                      	LDI YH, high(softTimerVar2Delay)
0000d6 8108                      	ld temp, Y
                                 	
0000d7 9300 0105                 	sts timerQueue1+timerQueueLenght1+0, temp
0000d9 e001                      	ldi temp, 0b00000001
                                 	//ldi temp, 255
0000da 9300 0104                 	sts timerQueue1+0, temp	
0000dc 9508                      ret
                                 
                                 
                                 /*
                                 
                                   .def LedStripflags = R22
                                 //бит 1 - 0 - анимация RGB ленты: фаза увеличения яркости, 1 - фаза уменьшения яркости
                                 
                                 .equ brightnessIncreaseDelay = 3
                                 .equ brightnessDecreaseDelay = 5
                                 */
                                 
                                 
                                 
                                 //функция начальной инициализации анимации RGB ленты
                                 RGBStripInitialization:
0000dd 2700                      	clr temp
0000de bd07                      	out OCR0A, temp
                                 
0000df e803                      	ldi temp, 0b10000011 //Fast PWM, Clear OC0A on Compare Match, 
0000e0 bd04                      	out TCCR0A, temp
                                 
0000e1 e0ce                      	LDI YL, low(softTimerVar1Delay) //грузим адрес переменной задержки изменения яркости в Y
0000e2 e0d1                      	LDI YH, high(softTimerVar1Delay)
0000e3 e002                      	ldi temp, brightnessIncreaseDelay //устанавливаем начальное значение пеменной softTimerVar1Delay
0000e4 8308                      	st Y, temp
0000e5 dfe5                      	rcall initSoftTimer1 //2-й программный таймер - изменение яркости RGB ленты (параметризированная процедура, параметр: задержка)
                                 
0000e6 6081                      	ori softTimerflags1, 0b00000001 //запускаем рабочий режим, нужно 1 раз, далее в алгоритме само
0000e7 6140                      	ori sysFlags0, 0b00010000 //включаем анимацию
0000e8 9508                      ret
                                 
                                 //функция выключения анимации RGB ленты
                                 RGBStripOFF:
0000e9 7e4f                      	andi sysFlags0, 0b11101111 //выключаем анимацию
                                 
0000ea 2700                      	clr temp //выключаем ШИМ
0000eb bd04                      	out TCCR0A, temp
0000ec 7f6d                      	andi LedStripflags, 0b11111101 //и ставил флаг(сбрасываем в 0) на увеличение яркости
0000ed 9508                      ret
                                 
                                 //функция работы анимации RGB ленты
                                 RGBStrip:
0000ee ff44                      	sbrs sysFlags0, 4 //переход на s0 если бит 4 сброшен т.е. анимация выключена
0000ef c021                      	rjmp s0
                                 	//иначе работаем
                                 
0000f0 ff80                      	sbrs softTimerflags1, 0 //переход на s1 если бит 0 сброшен т.е. фаза ожидания
0000f1 c01f                      	rjmp s1
                                 
0000f2 ff71                      	sbrs softTimerflags0, 1 //переход на s4 если бит 1 сброшен т.е. не наступило время изменения яркости
0000f3 c01d                      	rjmp s4
0000f4 7f7d                      	andi softTimerflags0, 0b11111101 //сбрасываем бит 1
                                 
0000f5 b527                      	in temp3, OCR0A //считываем скважность = яркость
                                 
0000f6 fd61                      	sbrc LedStripflags, 1 //переход на s2 если бит 1 установлен т.е. уменьшения яркости
0000f7 c00a                      	rjmp s2
                                 	//тут фаза увеличения яркости
0000f8 9523                      	inc temp3 //скважность увеличиваем на 1
0000f9 f4a9                      	brne s3 //переход если после увеличения регистр не стал = 0
0000fa ef2f                      	ser temp3 //иначе устанавливаем обратно в регистр 255 
0000fb 6062                      	ori LedStripflags, 0b00000010 //и ставил флаг на уменьшение яркости
                                 
0000fc e0ce                      	LDI YL, low(softTimerVar1Delay) //грузим адрес переменной задержки изменения яркости в Y
0000fd e0d1                      	LDI YH, high(softTimerVar1Delay)
0000fe e003                      	ldi temp, brightnessDecreaseDelay
0000ff 8308                      	st Y, temp
                                 
                                 	//переинициализируем программный таймер для задачи ожидания
000100 e00a                      	ldi temp, delayPhase3
                                 
                                 	/*LDI YL, low(softTimerVar2Delay) //грузим адрес переменной задержки в Y
                                 	LDI YH, high(softTimerVar2Delay)
                                 	 //устанавливаем значение пеменной softTimerVar2Delay
                                 	st Y, temp2
                                 	rcall initSoftTimer10 //1-й 16ти рязрядный программный таймер - анимация RGB ленты
                                 	andi LedStripflags, 0b11111110 //устанавливаем фазу ожидания*/
                                 
000101 c008                      	rjmp s5
                                 
                                 	s2:
                                 	//тут фаза уменьшения яркости
000102 952a                      	dec temp3 //скважность уменьшаем на 1
000103 f459                      	brne s3 //переход если после уменьшения регистр не стал = 0
000104 7f6d                      	andi LedStripflags, 0b11111101 //и ставил флаг(сбрасываем в 0) на увеличение яркости
                                 
000105 e0ce                      	LDI YL, low(softTimerVar1Delay) //грузим адрес переменной задержки изменения яркости в Y
000106 e0d1                      	LDI YH, high(softTimerVar1Delay)
000107 e002                      	ldi temp, brightnessIncreaseDelay
000108 8308                      	st Y, temp
                                 
                                 	//переинициализируем программный таймер для задачи ожидания
000109 ef0f                      	ldi temp, delayPhase1
                                 
                                 	s5:
00010a e0cf                      	LDI YL, low(softTimerVar2Delay) //грузим адрес переменной задержки в Y
00010b e0d1                      	LDI YH, high(softTimerVar2Delay)
                                 	 //устанавливаем значение пеменной softTimerVar2Delay
00010c 8308                      	st Y, temp
00010d dfc6                      	rcall initSoftTimer10 //1-й 16ти рязрядный программный таймер - анимация RGB ленты
00010e 7f8e                      	andi softTimerflags1, 0b11111110 //устанавливаем фазу ожидания
                                 
                                 	s3:
00010f bd27                      	out OCR0A, temp3
000110 dfba                      	rcall initSoftTimer1//инициализируем 2-й программный таймер - изменение яркости RGB ленты (параметризированная процедура, параметр: задержка)
                                 
                                 	s1:
                                 	//тут фаза ожидания
                                 
                                 
                                 	s4:
                                 
                                 	s0:
000111 9508                      ret
                                 
                                 
                                 	/*sbrs sysFlags0, 0 //переход на s0 если бит 0 сброшен т.е. время измения яркости не наступило
                                 	rjmp s0
                                 	//иначе работаем
                                 
                                 	in temp, OCR0A //считываем скважность = яркость
                                 
                                 	sbrc sysFlags0, 1 //переход на s1 если бит 1 установлен т.е. необходимо уменьшать скважность
                                 	rjmp s1
                                 
                                 	inc temp //иначе скважность увеличиваем на 1
                                 	brne s2 //переход если после увеличения регистр не стал = 0
                                 	ser temp //иначе устанавливаем обратно в регистр 255 
                                 	sbr sysFlags0, 0b00000010 //и ставил флаг на уменьшение яркости
                                 
                                 s1: 
                                 	dec temp //скважность уменьшаем на 1
                                 	brne s2 //переход если после увеличения регистр не стал = 0
                                 	cbr sysFlags0, 0b00000010 //и ставил флаг(сбрасываем в 0) на увеличение яркости
                                 s2:
                                 
                                 	out OCR0A, temp
                                 	cbr sysFlags0, 0b00000001 //сбрасываем бит
                                 
                                 	rcall initSoftTimer1 //переинициализируем таймер
                                 
                                 s0:
                                 ret*/
                                 
                                 //Подпрограмма сканирования клавиатуры
                                 keyScan:
000112 ff70                      	sbrs softTimerflags0, 0 //пропуск если установлен //бит 0 - программный таймер для задачи сканирования кнопок переполнен
000113 c01d                      	rjmp km0
000114 7f7e                      	cbr softTimerflags0, 1 //сбросить бит 0
                                 
000115 e0cd                      	LDI YL, low(buttonsState) //грузим адрес переменной состояния в Y
000116 e0d1                      	LDI YH, high(buttonsState)
000117 2755                      	clr i //переменная-счетчик цикла
000118 e021                      	ldi temp3, 0b00000001 //маска для выделения одного бита
000119 e0e6                      	LDI ZL, low(buttonsCounters) //грузим адрес переменной в Z
00011a e0f1                      	LDI ZH, high(buttonsCounters)
                                 
                                 km1:
00011b 8108                      	ld temp, Y //считываем переменную с памяти
00011c b116                      	in temp2, PINC //считываем состояние кнопок
                                 
00011d 2302                      	AND temp, temp3 //в байте остается только нужный в данный момент бит
00011e 2312                      	AND temp2, temp3
00011f 2701                      	eor temp, temp2 //если бит считанный с порта отличается от бита состояния из переменной значит кнопка изменила состояние и после команды temp не будет равен 0
                                 
000120 f051                      	breq km2 //переход если 0 т.е. биты одинаковые
                                 	//иначе инкрементируем счетчик кнопки
                                 	
000121 8110                      	ld temp2, Z //считываем переменную с памяти
000122 9513                      	inc temp2 //увеличиваем ее
000123 3015                      	cpi temp2, bounce //сравниваем получивщиеся значение с граничным
000124 f429                      	brne km3 //равно?
                                 	//да
000125 8138                      	ld temp4, Y //считываем переменную состояния кнопок с памяти
000126 2730                      	eor temp4, temp //инвентируем бит т.к. считаем текущее состояние кнопки достовеным
000127 8338                      	st Y, temp4 //записываем обратно переменную состояния кнопок
000128 2711                      	clr temp2 //обнуляем переменную времени для этой кнопки
000129 6048                      	sbr sysFlags0, 0b00001000 //устанавливаем бит 3 (был факт изменения состояния кнопки в переменной buttonsState)
                                 km3:
                                 	//нет
00012a 8310                      	st Z, temp2 //записываем переменную
                                 km2:
00012b 9101                      	ld temp, Z+ //считываем переменную с памяти с постинкрементацией для того чтобы значение адресной переменной было актуальным, само значение не нужно
00012c 0f22                      	lsl temp3 //делаем сдвиг маски, для обработки следующего бита
00012d 9553                      	inc i
00012e 3058                      	cpi i, qtyButtons+1
00012f f759                      	brne km1
                                 
000130 df93                      	rcall initSoftTimer0
                                 km0:
000131 9508                      ret
                                 
                                 /*PD2 - выход на неон
                                   PD3 - выход на RGB ленту, канал R (ШИМ)
                                   PD4 - выход на оптрон кнопки повер банка (1-оптрон включается и замыкает кнопку)
                                   PD5 - выход на RGB ленту, канал B (ШИМ)
                                   PD6 - выход на RGB ленту, канал G (ШИМ)
                                   PD7 - незанят
                                   
                                   PB1 - незанят (ШИМ)
                                   PB2 - передние ленты (ШИМ)
                                   PB3 - незанят (ШИМ)
                                 
                                   PC0 - вход кнопка 8 (включение и выключение неона)
                                   PC1 - вход кнопка 6 (включение и выключение RGB лент)
                                   PC2 - вход кнопка 5
                                   PC3 - вход кнопка 4
                                   PC4 - вход кнопка 3 (включение и выключение ленты)
                                   PC5 - вход кнопка 2 (мигнуть лентами)
                                   PC6 - вход кнопка 1  *неправильно подключил*
                                 
                                   [1] [3] [5] [7]
                                   [2] [4] [6] [8]
                                 
                                 */
                                 
                                 //Подпрограмма обработки нажатий клавиш
                                 buttonHandler:
000132 ff43                      	sbrs sysFlags0, 3 //пропуск если установлен ////бит 3 - 1 - был факт изменения состояния кнопки в переменной buttonsState
000133 c00a                      	rjmp bm0
000134 7f47                      	cbr sysFlags0, 0b00001000 //сбросить бит 3
                                 
000135 e0cd                      	LDI YL, low(buttonsState) //грузим адрес переменной состояния в Y
000136 e0d1                      	LDI YH, high(buttonsState)
000137 8108                      	ld temp, Y //считываем переменную состояния кнопок с памяти
                                 
000138 ff00                      	sbrs temp, 0
000139 d005                      	rcall btn8
                                 
00013a ff02                      	sbrs temp, 2
00013b d00f                      	rcall btn5
                                 
00013c ff04                      	sbrs temp, 4
00013d d007                      	rcall btn3
                                 
                                 	//sbrs temp, 5
                                 	//rcall btn2
                                 
                                 bm0:
00013e 9508                      ret
                                 
                                 /*btn2:
                                 	SBIS PORTB, 2
                                 	rjmp btn2m0
                                 	CBI PORTB, 2
                                 	rjmp btn2m1
                                 btn2m0:
                                 	SBI PORTB, 2
                                 btn2m1:
                                 ret*/
                                 
                                 btn8: //(включение и выключение неона)
00013f 9b5a                      	SBIS PORTD, 2
000140 c002                      	rjmp btn8m0
000141 985a                      	CBI PORTD, 2
000142 c001                      	rjmp btn8m1
                                 btn8m0:
000143 9a5a                      	SBI PORTD, 2
                                 btn8m1:
000144 9508                      ret
                                 
                                 btn3: //(включение и выключение ленты)
000145 9b2a                      	SBIS PORTB, 2
000146 c002                      	rjmp btn3m0
000147 982a                      	CBI PORTB, 2
000148 c001                      	rjmp btn3m1
                                 btn3m0:
000149 9a2a                      	SBI PORTB, 2
                                 btn3m1:
00014a 9508                      ret
                                 
                                 btn5:
00014b ff44                      	SBRS sysFlags0, 4
00014c c002                      	rjmp btn5m0
00014d df9b                      	rcall RGBStripOFF
00014e c001                      	rjmp btn5m1
                                 btn5m0:
00014f df8d                      	rcall RGBStripInitialization
                                 btn5m1:
000150 9508                      ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 //Подпрограмма сканирования клавиатуры
                                 /*keyScan:
                                 	sbrs sysFlags0, 4 //пропуск если установлен //бит 4 - программный таймер для задачи сканирования кнопок переполнен
                                 	rjmp km0
                                 	cbr sysFlags0, 16 //сбросить бит 4
                                 
                                 	SBIS PINB, 0
                                 	rcall btn0
                                 
                                 	SBIS PIND, 1
                                 	rcall btn1
                                 
                                 	SBIS PIND, 2
                                 	rcall btn2
                                 
                                 	SBIS PIND, 3
                                 	rcall btn3
                                 
                                 	SBIS PIND, 4
                                 	rcall btn4
                                 
                                 	SBIS PIND, 5
                                 	rcall btn5
                                 
                                 	SBIS PIND, 6
                                 	rcall btn6
                                 
                                 	SBIS PIND, 7
                                 	rcall btn7
                                 
                                 	//Запуск таймера
                                 	ldi temp, 255
                                 	sts timerQueue0+timerQueueLenght0+1, temp
                                 	ldi temp, 16 //4-й бит
                                 	sts timerQueue0+1, temp
                                 
                                 km0:
                                 ret
                                 
                                 //Подпрограммы обработки нажатий клавиш
                                 btn0:
                                 
                                 	*//*ldi temp, 0
                                 	mov eeadr, temp
                                 	rcall EERead
                                 	mov distPosL, eedata
                                 
                                 	ldi temp, 1
                                 	mov eeadr, temp
                                 	rcall EERead
                                 	mov distPosH, eedata
                                 
                                 	rcall runTo*/
                                 
                                 	/*ldi i, 0
                                 	rcall btnPosHandler
                                 ret
                                 
                                 btn1:
                                 	ldi i, 1
                                 	rcall btnPosHandler


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :  23 z  :   4 r0 :   1 r1 :   1 r2 :   1 r3 :   1 r4 :   1 
r5 :   1 r6 :   1 r7 :   1 r8 :   1 r9 :   1 r10:   1 r11:   1 r12:   1 
r13:   1 r14:   1 r15:   1 r16: 103 r17:   9 r18:  10 r19:   4 r20:   8 
r21:  14 r22:   5 r23:   6 r24:   5 r25:   1 r26:   1 r27:   1 r28:  18 
r29:  18 r30:   4 r31:   4 
Registers used: 34 out of 35 (97.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   2 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   2 cbr   :   2 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  40 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   8 cpse  :   0 dec   :   3 eor   :   2 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :   5 jmp   :   0 
ld    :  11 ldd   :   2 ldi   :  53 lds   :   0 lpm   :   0 lsl   :   1 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   3 out   :  16 pop   :  14 
push  :  12 rcall :  13 ret   :  11 reti  :  23 rjmp  :  19 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   2 sbic  :   0 sbis  :   2 
sbiw  :   0 sbr   :   1 sbrc  :   1 sbrs  :   9 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   4 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  12 std   :   2 sts   :   7 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002a2    628      0    628   32768   1.9%
[.dseg] 0x000100 0x000110      0     16     16    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
